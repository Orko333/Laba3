package battle;

import droids.Droid;
import arena.BattleArena;
import utils.ConsoleColors;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import io.*;

public class Battle {
    private List<Droid> teamA;
    private List<Droid> teamB;
    private BattleArena arena;
    private static BattleLog battleLog; // –î–æ–¥–∞–Ω–æ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∂—É—Ä–Ω–∞–ª—É –±–æ—é

    public Battle(List<Droid> teamA, List<Droid> teamB, BattleArena arena) {
        this.teamA = new ArrayList<>(teamA);
        this.teamB = new ArrayList<>(teamB);
        this.arena = arena;
        this.battleLog = new BattleLog(); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∂—É—Ä–Ω–∞–ª—É
    }

    public void start() {
        System.out.printf(ConsoleColors.BOLD + ConsoleColors.BLUE + "üèüÔ∏è –ë—ñ–π –Ω–∞ –∞—Ä–µ–Ω—ñ: %s%n" + ConsoleColors.RESET, arena.getName());
        battleLog.addEntry("üèüÔ∏è –ë—ñ–π –Ω–∞ –∞—Ä–µ–Ω—ñ: " + arena.getName());

        List<Droid> teamAfight = new ArrayList<>(teamA);
        List<Droid> teamBfight = new ArrayList<>(teamB);

        // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –µ—Ñ–µ–∫—Ç–∏ –∞—Ä–µ–Ω–∏
        applyArenaEffects();

        while (!teamAfight.isEmpty() && !teamBfight.isEmpty()) {
            processTeamRound(teamAfight, teamBfight);
            processTeamRound(teamBfight, teamAfight);
            processHealing(teamAfight);
            processHealing(teamBfight);

            displayTeamStats();
            System.out.println("---------------------------");
        }

        announceWinner();
        battleLog.saveLog("battle_log.ser"); // –ó–±–µ—Ä–µ–≥—Ç–∏ –∂—É—Ä–Ω–∞–ª –±–æ—é –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    }

    private void applyArenaEffects() {
        System.out.println(ConsoleColors.YELLOW + "–ó–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è –µ—Ñ–µ–∫—Ç–∏ –∞—Ä–µ–Ω–∏: " + ConsoleColors.RESET);
        for (Droid droid : teamA) {
            applyEffectToDroid(droid);
        }
        for (Droid droid : teamB) {
            applyEffectToDroid(droid);
        }
    }

    private void applyEffectToDroid(Droid droid) {
        double initialEnergy = droid.getEnergy();
        double initialAccuracy = droid.getAccuracy();
        int initialArmor = droid.getArmor();

        droid.setEnergy(droid.getEnergy() + arena.getEnergyEffect());  // –ï—Ñ–µ–∫—Ç –µ–Ω–µ—Ä–≥—ñ—ó
        droid.setAccuracy(droid.getAccuracy() + arena.getAccuracyEffect());  // –ï—Ñ–µ–∫—Ç —Ç–æ—á–Ω–æ—Å—Ç—ñ
        droid.setArmor(droid.getArmor() + arena.getArmorEffect());  // –ï—Ñ–µ–∫—Ç –±—Ä–æ–Ω—ñ

        // –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–º—ñ–Ω–∏
        System.out.printf(ConsoleColors.YELLOW + "‚öôÔ∏è –ï—Ñ–µ–∫—Ç–∏ –∞—Ä–µ–Ω–∏ '%s' –¥–ª—è –¥—Ä–æ—ó–¥–∞ %s:%n", arena.getName(), droid.getName());
        System.out.printf(ConsoleColors.CYAN + "   üîã –ï–Ω–µ—Ä–≥—ñ—è: %.2f -> %.2f%n", initialEnergy, droid.getEnergy());
        System.out.printf(ConsoleColors.CYAN + "   üéØ –¢–æ—á–Ω—ñ—Å—Ç—å: %.2f -> %.2f%n", initialAccuracy, droid.getAccuracy());
        System.out.printf(ConsoleColors.CYAN + "   üõ°Ô∏è –ë—Ä–æ–Ω—è: %d -> %d%n" + ConsoleColors.RESET, initialArmor, droid.getArmor());
    }

    private void processTeamRound(List<Droid> attackers, List<Droid> defenders) {
        for (Droid attacker : attackers) {
            if (!attacker.isAlive()) continue;

            int enemyIndex = selectEnemy(defenders);
            Droid enemy = defenders.get(enemyIndex);

            attack(attacker, enemy);

            if (!enemy.isAlive()) {
                System.out.println(ConsoleColors.RED + "üî• " + enemy.getName() + " –∑–Ω–∏—â–µ–Ω–∏–π!" + ConsoleColors.RESET);
                defenders.remove(enemy);
                battleLog.addEntry("üî• " + enemy.getName() + " –∑–Ω–∏—â–µ–Ω–∏–π!");
            }
            attacker.regenerateEnergy();
        }
    }

    private void processHealing(List<Droid> team) {
        for (Droid droid : team) {
            if (droid.isMedic() && droid.isAlive()) {
                healTeam(droid, team);
            }
        }
    }

    private void healTeam(Droid medic, List<Droid> team) {
        for (Droid ally : team) {
            if (ally != medic && ally.isAlive()) {
                ally.setHealth(Math.min(100, ally.getHealth() + 10)); // –õ—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ 10 –æ–¥–∏–Ω–∏—Ü—å
                System.out.printf(ConsoleColors.GREEN + "‚ù§Ô∏è %s –ª—ñ–∫—É—î %s, –≤—ñ–¥–Ω–æ–≤–ª—é—é—á–∏ 10 –∑–¥–æ—Ä–æ–≤'—è! –ó–¥–æ—Ä–æ–≤'—è %s: %d%n" + ConsoleColors.RESET,
                        medic.getName(), ally.getName(), ally.getName(), ally.getHealth());
                battleLog.addEntry(medic.getName() + " –ª—ñ–∫—É—î " + ally.getName() + ", –≤—ñ–¥–Ω–æ–≤–ª—é—é—á–∏ 10 –∑–¥–æ—Ä–æ–≤'—è! –ó–¥–æ—Ä–æ–≤'—è: " + ally.getHealth());
            }
        }
    }

    private void displayTeamStats() {
        System.out.println("\n" + ConsoleColors.UNDERLINE + "üí™ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–æ—ó–¥—ñ–≤ –ø—ñ—Å–ª—è —Ä–∞—É–Ω–¥—É:" + ConsoleColors.RESET);
        for (Droid droid : teamA) {
            droid.displayHealth();
        }
        for (Droid droid : teamB) {
            droid.displayHealth();
        }
    }

    private void announceWinner() {
        if (teamA.isEmpty()) {
            System.out.println(ConsoleColors.GREEN + "üèÜ –ö–æ–º–∞–Ω–¥–∞ B –≤–∏–≥—Ä–∞–ª–∞!" + ConsoleColors.RESET);
            battleLog.addEntry("üèÜ –ö–æ–º–∞–Ω–¥–∞ B –≤–∏–≥—Ä–∞–ª–∞!");
        } else {
            System.out.println(ConsoleColors.GREEN + "üèÜ –ö–æ–º–∞–Ω–¥–∞ A –≤–∏–≥—Ä–∞–ª–∞!" + ConsoleColors.RESET);
            battleLog.addEntry("üèÜ –ö–æ–º–∞–Ω–¥–∞ A –≤–∏–≥—Ä–∞–ª–∞!");
        }
    }

    public void attack(Droid attacker, Droid enemy) {
        if (attacker.getEnergy() >= 10) {
            if (Math.random() < attacker.getAccuracy()) {
                int inflictedDamage = Math.max(0, attacker.getDamage() + attacker.getWeapon().getDamage() - enemy.getArmor());
                enemy.setHealth(Math.max(0, enemy.getHealth() - inflictedDamage));
                attacker.setAttacksMade(attacker.getAttacksMade() + 1);
                enemy.setDamageTaken(enemy.getDamageTaken() + inflictedDamage);
                System.out.printf(ConsoleColors.RED + "üí• %s –∞—Ç–∞–∫—É—î %s, –∑–∞–≤–¥–∞—é—á–∏ %d —à–∫–æ–¥–∏! –ó–¥–æ—Ä–æ–≤'—è %s: %d%n" + ConsoleColors.RESET,
                        attacker.getName(), enemy.getName(), inflictedDamage, enemy.getName(), enemy.getHealth());
                battleLog.addEntry(attacker.getName() + " –∞—Ç–∞–∫—É—î " + enemy.getName() + ", –∑–∞–≤–¥–∞—é—á–∏ " + inflictedDamage + " —à–∫–æ–¥–∏!");
            } else {
                System.out.printf(ConsoleColors.YELLOW + "‚ùå %s –ø—Ä–æ–º–∞—Ö—É—î—Ç—å—Å—è –ø–æ %s!%n" + ConsoleColors.RESET, attacker.getName(), enemy.getName());
                battleLog.addEntry(attacker.getName() + " –ø—Ä–æ–º–∞—Ö—É—î—Ç—å—Å—è –ø–æ " + enemy.getName() + "!");
            }
            attacker.setEnergy(attacker.getEnergy() - 10);
        } else {
            System.out.printf(ConsoleColors.YELLOW + "%s –Ω–µ –º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –∞—Ç–∞–∫–∏!%n", attacker.getName());
            battleLog.addEntry(attacker.getName() + " –Ω–µ –º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –∞—Ç–∞–∫–∏!");
        }
    }

    private int selectEnemy(List<Droid> enemies) {
        Random random = new Random();
        return random.nextInt(enemies.size());
    }
}
